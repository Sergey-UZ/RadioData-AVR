/*
	 Project  : Приём данных по радио-каналу
	 Version  : 1
	 Date     : 16.10.2023
	 Author   : Sergey
	 Chip     : AVR
	 Comments : 
	 						Входной сигнал на 2 PIN-а INT0 + INT1
	 						2 отдельных таймера/счётчика
	 						Оба этих счётчика используются в монопольном режиме. В процессе работы
	 						функция RadioPriem изменяет их периуд работы.
	 						Для первого из них необходимо настроить прерывание (в режиме normal или CTC) 
	 							с периудом равным периуду 1-во бита, в прерывании которого будет вызыватся
	 							функция RadioPriem
	 						Для второго необходимо настроить таймер/счётчик на максимальный периуд 
	 						больше чем у первого от 20 до 100% и без прерывания (в режиме normal или CTC)
	 						Например:
	 							Функция RadioPriem вызыватся каждые 1 миллисекунду
	 							Тогда максимальный периуд следования второго таймера/счётчика
	 							будет равен 1,2 миллисекунды
	 						Первый таймер/счётчик выполняет функцию внутреннего тактового сигнала
	 						Второй измеряет длительность периуда следования каждого 1-ного
	 							входного радио-сигнала
	 						
	 						Манчестерское кодирование
              Входной бит данных 1 --- передаётся как сначало 1 потом 0
              Входной бит данных 0 --- передаётся как сначало 0 потом 1
              Состав входного пакета:
               * Стартовый бит (1 периуд логической 1-ницы)
               * Преамбула 1 Байт = (0b01010101)
               * Пользовательские данные (n Байт)
               * CRC 1 Байт
              Если в принятом пакете CRC не совпадает - то этот пакет тут-же удаляется
              
              Функция EventNarastayuschiyFront
              Обрабатывает событие нарастающий фронт входного сигнала
              Для этой функции необходимо настроить прерывание по нарастающему фронту
              специального PIN-а микроконтроллера (внешнее прерывание - INT0) и
              вызывать эту функцию внутри этого прерывания
              
              Функция EventSpadayuschiyFront
              Обрабатывает событие спадающий фронт входного сигнала
              Для этой функции необходимо настроить прерывание по спадающему фронту
              специального PIN-а микроконтроллера (внешнее прерывание - INT1) и
              вызывать эту функцию внутри этого прерывания
              
              Функция RadioPriem
              Выполняет обработку входного сигнала
              Для этой функции необходимо настроить прерывание для таймера/счётчика
              (в режиме normal или CTC) с периудом равным периуду 1-во бита. И в этом
              прерывании вызывать функцию RadioPriem
              Например:
                Выберем периуд следования 1-во бита равным 1 миллисекунде
                Функция RadioPriem должна вызыватся каждые 1 миллисекунду
              
              Функция RadioRead         
              Копирует пользовательские данные из служебного пакета данных, 
            	 принятого по радио-каналу и сохраняет его в пользовательский пакет данных
            	 (Преамбулы и CRC там не будет)
              Параметры:
                char *Data         - Указатель на массив с пользовательским пакетом данных
                char *FlagOwerflow - Указатель на переменную для определения потери
                     	                предыдущего пакета 
              Возвращаемое значение:
                        char (1) - Пакет данных получен
                        char (0) - Нет принятых данных
                FlagOwerflow (1) - предыдущий пакет потерян
                FlagOwerflow (0) - нет потери пакета                               
*/

#ifndef RADIO_PRIEM_INCLUDED
#define RADIO_PRIEM_INCLUDED

#include <io.h>
#include <stdint.h>

// Пользовательские настройки ===============================================
/*
	 Счётный регистр таймера/счётчика который измеряет длительность 
	 	 периуда следования каждого 1-ного входного радио-сигнала
	 Раскоментируйте один из вариантов в зависимости от того какой у 
	 	 вас выбран таймер/счётчик (8-ми или 16-ти разрядный)
	 Сейчас раскоментирован вариант для МК ATTyny2313 
	 	 таймер/счётчик 0 (8-ми разрядный)
*/
// Вариант 8-ми разрядный -----------------------
#define REGISTR_TCNT_TIMER_PERIUD  TCNT0
// Вариант 16-ти разрядный ----------------------
//#define REGISTR_TCNTH_TIMER_PERIUD  TCNT1H
//#define REGISTR_TCNTL_TIMER_PERIUD  TCNT1L
//-----------------------------------------------
/*
	 Счётный регистр таймера/счётчика который выполняет функцию 
	 	 внутреннего тактового сигнала, в прерывании которого 
	 	 вызыватся функция RadioPriem
	 Раскоментируйте один из вариантов в зависимости от того какой у 
	 	 вас выбран таймер/счётчик (8-ми или 16-ти разрядный)
	 Сейчас раскоментирован вариант для МК ATTyny2313 
	 	 таймер/счётчик 1 (16-ти разрядный) 	 
*/
// Вариант 8-ми разрядный -----------------------
//#define REGISTR_TCNT_TIMER_CLK  TCNT0
// Вариант 16-ти разрядный ----------------------
#define REGISTR_TCNTH_TIMER_CLK  TCNT1H
#define REGISTR_TCNTL_TIMER_CLK  TCNT1L
//-----------------------------------------------
/*
	 Регистр флагов прерываний от таймера/счётчика который выполняет 
	 	 функцию внутреннего тактового сигнала, в прерывании которого 
	 	 вызыватся функция RadioPriem, в котором есть флаг этого
	 	 выбранного вами варианта прерывания 	 	 
	 Сейчас показан вариант для МК ATTyny2313 
	 	 таймер/счётчик 1, режим работы CTC, прерывание при совпадении
	 	 регистра сравнения OCR1A со счётным регистром TCNT1
*/
#define REGISTR_FLAG_PRERYIVANIYA  TIFR
#define FLAG_PRERYIVANIYA          OCF1A
//-----------------------------------------------
// Кол-во пользовательских байтов в пакете
#define RADIO_PAKET_DATA_BAYT_COUNT  5
//==============================================================================
/*
   Эта директива запрещает компилятору выдавать предупреждения о том, 
    что функция объявлена, но в программе не используется.
*/
#pragma used+
// Прототипы функций ===============================
char RadioRead (char *Data, char *FlagOwerflow);
void EventNarastayuschiyFront (void);
void EventSpadayuschiyFront (void);
void RadioPriem(void);
//==================================================
/* 
   Эта директива разрешает компилятору выдавать предупреждения о том, 
    что функция объявлена, но в программе не используется.
*/
#pragma used-
#endif 