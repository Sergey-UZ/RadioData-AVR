/*******************************************************
This program was created by the CodeWizardAVR V3.40
Automatic Program Generator
© Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
http://www.hpinfotech.ro

Project : Радиоприёмник
Version : 6
Date    : 05.10.2023
Author  : ASUS
Company : MyComp
Comments: Радио данные поступают на вход INT0 + INT1
					Внутренний тактовый сигнал синхронизируется
					только один раз с первым битом

Chip type               : ATtiny2313A
AVR Core Clock frequency: 4,000000 MHz
Memory model            : Tiny
External RAM size       : 0
Data Stack size         : 32
*******************************************************/

#include <tiny2313a.h>

#define BIT_0(chislo, poziciya)         (chislo) &= (~(1 << (poziciya)))
#define BIT_1(chislo, poziciya)         (chislo) |=   (1 << (poziciya))            
#define BIT_RAVEN_0(chislo, poziciya)   (((chislo) & (1 << (poziciya))) == 0)
#define PERIUD_INFO_BIT1_MINUS_7_PROSENT 0x37
flash unsigned char PREAMBULA = 0b01010101; // Преамбула передатчика
enum InSignal // Входной фронт сигнала и все его состояния
{
  NarastayuschiyFront = 1, // Нарастающий фронт
  SpadayuschiyFront = 0,   // Спадающий фронт 
} InSignal = SpadayuschiyFront;
// Кол-во пользовательских байтов в пакете
#define RADIO_PAKET_DATA_BAYT_COUNT 5
// Пользовательский пакет данных содержащий принятые по радио-каналу данные
char RadioPaketData[RADIO_PAKET_DATA_BAYT_COUNT];
// Служебный пакет для приёма данных по радио-каналу
volatile char RadioPaketIn[RADIO_PAKET_DATA_BAYT_COUNT + 1];
unsigned int InfoBit1TikTCNT = 0; // Сохраняет длительность периуда входного 1-ного информационного бита
unsigned char msLedR = 0; // Переменная для подсчёта миллисекунд для LED Red
unsigned char msLedG = 0; // Переменная для подсчёта миллисекунд для LED Green
unsigned char msLedB = 0; // Переменная для подсчёта миллисекунд для LED Blue
/* 
	 Флаг завершения приёма пакета.
   Флаг устанавливается в 1 автоматически после завершения приёма пакета.
   Сбрасывается флаг автоматически после прочтения данных в RadioPaketIn. 
*/
volatile bit RadioPaketPrinyat = 0;  
/* 
	 Флаг переполнения RadioPaketIn. Индицирует потерю предыдущего пакета.
   Флаг устанавливается в 1 автоматически, если в момент завершения приёма 1-го пользовательского
    байта нового пакета, данные в RadioPaketIn ранее не были прочитаны. 
   Сбрасывается флаг автоматически после прочтения данных в RadioPaketIn. 
*/
 volatile bit RadioPaketOverflow = 0;
/*
   Информационный бит (минимальная часть пакета данных) и все его состояния
    1-ный информационный бит считается принятым если его периуд будет равен периуду одного информационного бита
    0-ой информационный бит считается принятым если в течении всего периуда наблюдения за входным сигналом
      не был обнаружен 1-ный информационный бит (не был принят 1, значит это 0)
*/
/*
   Флаг поиска 0-го входящего бита пакета.
   Флаг устанавливается в 1 для поиска 0-го входящего бита пакета.
   Сбрасывается флаг автоматически после принятия 0-го бита пакета
   и устанавливается в 1 автоматически для поиска 0-го входящего
   бита следующего пакета.
*/
bit Bit0 = 1;

bit FlagSinhronizacii = 0;

// Прототипы функций ===============================
char RadioRead (char *Data, char *FlagOwerflow);
char CRC_8(char *Data, unsigned char Length_Data);
interrupt[EXT_INT0] void ext_int0_isr(void);
interrupt[EXT_INT1] void ext_int1_isr(void);
interrupt[TIM1_COMPA] void timer1_compa_isr(void);
void main(void);
//==================================================


/*
   Функция копирует пользовательские данные из служебного пакета данных, 
   	 принятого по радио-каналу и сохраняет его в пользовательский пакет данных.
   Параметры:
    char *Data - Указатель на массив с пользовательским пакетом данных
    char *FlagOwerflow - Указатель на переменную для определения потери
    	предыдущего пакета 
    const RADIO_PAKET_DATA_BAYT_COUNT
   Возвращаемое значение:
    FlagOwerflow (0) - нет потери пакета
    FlagOwerflow (1) - предыдущий пакет потерян
    char (0) - Нет принятых данных
    char (1) - Пакет данных получен
*/
char RadioRead (char *Data, char *FlagOwerflow)
{
	unsigned char i; // Индексная переменная
	
	if (RadioPaketPrinyat == 1)
	{
		for (i = 0; i < RADIO_PAKET_DATA_BAYT_COUNT; i++)
		  Data[i] = RadioPaketIn[i];
		*FlagOwerflow = RadioPaketOverflow;
		RadioPaketOverflow = 0;
		RadioPaketPrinyat = 0;
		return 1;
	}
	return 0;	
}


/* 
   Функция вычисления CRC-8
   Параметры:
    Используемый полином = x^8 + x^5 + x^4 + 1 = 0x31 
    Начальное значение регистра CRC = 0xFF 
    char *Data - Указатель на массив данных для которых вычисляется их CRC
    unsigned char Length_Data - Указать нужное колличество байт массива данных для которых вычисляется CRC
   Возвращаемое значение:
    char - CRC-8
 */
char CRC_8(char *Data, unsigned char Length_Data)
{
  char Registr_CRC = 0xFF; // Начальное значение регистра CRC
  unsigned char i; // Индексная переменная

  while (Length_Data--)  //Вычислить CRC для блока данных
  {
    Registr_CRC ^= *Data++;
    for (i = 0; i < 8; i++)
    {
      Registr_CRC >>= 1;
      if ( (Registr_CRC & 0b00000001) != 0 )
        Registr_CRC ^= 0x31;
    }          
  }   
  return Registr_CRC; 
}


// External Interrupt 0 service routine
// Прерывание по нарастающему фронту
interrupt[EXT_INT0] void ext_int0_isr(void)
{	
  // Test
  PORTD.0 = ~PORTD.0; // 1 Передний фронт
  
  /*
     Поиск преамбулы
     Поиск нулевого бита преамбулы
     Поиск 1-ного информационного бита
  */
  if (Bit0 == 1)
  {
    // Синхронизация внутриннего тактового генератора для приёма данных по радио-каналу
    TCNT1H = 0; // Сначало старший байт
    TCNT1L = 0; // а затем младший

    // Test
    PORTD.4 = ~PORTD.4; // 3 1 мс
  }
	InSignal = NarastayuschiyFront;
  TCNT0 = 0; // Начать отсчёт длительности периуда 1-ного информационного бита
}


// External Interrupt 1 service routine
// Прерывание по спадающему фронту
interrupt[EXT_INT1] void ext_int1_isr(void)
{  
  // Test
  PORTD.1 = ~PORTD.1; // 2 Задний фронт
  
  InSignal = SpadayuschiyFront;
  // Суммировать все длительности периуда 1-ного состояния принимаемого информационного бита
  InfoBit1TikTCNT = InfoBit1TikTCNT + TCNT0;
  
  if (FlagSinhronizacii == 1)
  {
  	/*
	    6 -той бит преамбулы найден
	    1-ный информационный бит принят
	  */
	  if (InfoBit1TikTCNT >= PERIUD_INFO_BIT1_MINUS_7_PROSENT)
	  {
	    // Test
      PORTD.4 = ~PORTD.4; // 3 1 мс
      
	    TCNT1H = 0; // Сначало старший байт
	    TCNT1L = 0; // а затем младший	     
	  }
		FlagSinhronizacii = 0;  
  }
    
}


// Timer1 output compare A interrupt service routine
// Прерывание каждые 1 мс (длительность 1 информационного бита)
interrupt[TIM1_COMPA] void timer1_compa_isr(void)
{
  static unsigned char IndexBayt = 0; // Индекс принятого байта
  static unsigned char IndexPaketBayt = 0; // Индекс принятого пакета байтов
  bit BitIn; // Буффер для принятого бита
  bit BitPreambula; // Значение бита преамбулы
  static char BaytIn; // Буффер для принятого байта 
  /*
   Флаг поиска с 1-го по 7-ой входящий бит пакета.
   Флаг устанавливается в 1 автоматически для поиска с 1-го по 7-ой входящий бит пакета.
   Сбрасывается флаг автоматически после принятия 7-го бита пакета.
   и устанавливается в 1 автоматически для поиска с 1-го по 7-ой входящий бит следующего пакета.
  */
  static bit Bit1_7 = 0;
  static bit Bit8_n = 0; // Запретить приём с 8-го по n-ый входящий бит пакета
	
	// Всегда уменьшать переменную до нуля
  if (msLedR != 0)
    --msLedR;
  if (msLedG != 0)
    --msLedG;  
  if (msLedB != 0)
    --msLedB;

    
  // Test
  PORTD.4 = ~PORTD.4; // 3 1 мс
  /*
     Поиск преамбулы
     Поиск нулевого бита преамбулы
     Поиск 1-ного информационного бита
  */
  if (Bit0 == 1)
  { 
  	if (InSignal == NarastayuschiyFront)
  		InfoBit1TikTCNT = InfoBit1TikTCNT + TCNT0;      
	  /*
	    Нулевой бит преамбулы найден
	    1-ный информационный бит принят
	  */
	  if (InfoBit1TikTCNT >= PERIUD_INFO_BIT1_MINUS_7_PROSENT)
	  {
	    // Test
	    PORTD.5 = ~PORTD.5; // 4 Сигнал 1
	    
			++IndexBayt;
      Bit0 = 0; // Завершить поиск нулевого бита преамбулы
      Bit1_7 = 1; // Начать поиск с 1-вого по 7-ой бит преамбулы	     
	  }       
    InfoBit1TikTCNT = 0; // Цикл приёма информационного бита завершён
    return;
  }
  //Поиск всех остальных битов преамбулы
  if (Bit1_7 == 1)
  {
  	if (InSignal == NarastayuschiyFront)
  		InfoBit1TikTCNT = InfoBit1TikTCNT + TCNT0;
  	TCNT0 = 0;	
  	/*
       Определить какой был принят информационный бит 1-ный или 0-ой        
       1-ный информационный бит принят
    */
    if (InfoBit1TikTCNT >= PERIUD_INFO_BIT1_MINUS_7_PROSENT)
    {
      // Test
      PORTD.5 = ~PORTD.5; // 4 Сигнал 1

      BitIn = 1;
    }
    else // 0-ой информационный бит принят
    {
      // Test
      PORTB.5 = ~PORTB.5; // 5 Сигнал 0

       BitIn = 0;
    }       
    InfoBit1TikTCNT = 0; // Цикл приёма информационного бита завершён
    /*
       Сравнение принятых бит с битами преамбулы
       Если обнаружено несовпадение тогда перезагрузка радио-приёма
    */   
    if (BIT_RAVEN_0(PREAMBULA, IndexBayt)) // n-бит преамбулы равен 0
    	BitPreambula = 0;
    else // n-бит преамбулы равен 1 
    	BitPreambula = 1;          		
    if (BitIn == BitPreambula)	
    	++IndexBayt;
    else // Перезагрузка радио-приёма
    {
      IndexBayt = 0;
      Bit1_7 = 0; // Завершить поиск с 1-вого по 7-ой бит преамбулы
      Bit0 = 1; // Начать поиск нулевого бита преамбулы
    }
    // Синхронизация внутриннего тактового генератора для приёма данных по радио-каналу
    if (IndexBayt == 6)
    {
    	// Test
      PORTD.4 = ~PORTD.4; // 3 1 мс
      
	    FlagSinhronizacii = 1;
    }	
    // Преамбула найдена
    if (IndexBayt == 8)
    {
      // Test
      PORTB.6 = ~PORTB.6; // 6 Байт ОК

      IndexBayt = 0;
      FlagSinhronizacii = 0;
      Bit1_7 = 0; // Завершить поиск преамбулы
      Bit8_n = 1; // Начать приём с 8-го по n-ый входящий бит пакета
    }
    return;
  }
  /*
     Поиск всех остальных информационных битов пакета
     Приём пользовательских данных
  */
  if (Bit8_n == 1)
  {
  	if (InSignal == NarastayuschiyFront)
  		InfoBit1TikTCNT = InfoBit1TikTCNT + TCNT0;
  	TCNT0 = 0;	
  	/*
       Определить какой был принят информационный бит 1-ный или 0-ой        
       1-ный информационный бит принят
    */
    if (InfoBit1TikTCNT >= PERIUD_INFO_BIT1_MINUS_7_PROSENT)
    {
      // Test
      PORTD.5 = ~PORTD.5; // 4 Сигнал 1

      BIT_1(BaytIn,IndexBayt); // Сохранить входной бит в буффере
    }
    else // 0-ой информационный бит принят
    {
      // Test
      PORTB.5 = ~PORTB.5; // 5 Сигнал 0

      BIT_0(BaytIn,IndexBayt); // Сохранить входной бит в буффере
    }           
    InfoBit1TikTCNT = 0; // Цикл приёма информационного бита завершён
    ++IndexBayt;
    // Принят ещё 1 байт
    if (IndexBayt == 8)
    {
      // Test
      PORTB.6 = ~PORTB.6; // 6 Байт ОК

      IndexBayt = 0;
      // Предыдущий пакет потерян
      if (RadioPaketPrinyat == 1)
      {
      	RadioPaketOverflow = 1;
      }
      // Принят пользовательский байт
      if (IndexPaketBayt < RADIO_PAKET_DATA_BAYT_COUNT + 1)
      {
        RadioPaketIn[IndexPaketBayt] = BaytIn; // Сохранить принятый байт в пакете
        ++IndexPaketBayt;
      }
      // Приём всего пакета данных завершён
      if (IndexPaketBayt == (RADIO_PAKET_DATA_BAYT_COUNT + 1))	
      {
        // Test
        PORTB.7 = ~PORTB.7; // 7 Пакет ОК
        
				// Проверка целостности пользовательских данных принятого пакета
				if (RadioPaketIn[RADIO_PAKET_DATA_BAYT_COUNT] == CRC_8(RadioPaketIn, RADIO_PAKET_DATA_BAYT_COUNT))
				{
					// Test
        	PORTB.7 = ~PORTB.7; // 7 Пакет ОК
        	
        	// Данные в целости
	        RadioPaketPrinyat = 1;
				}
				else // Test Потеря пакета
				{
					// Test
				  msLedR = 150;    
		    	PORTB.0 = 1; // Включить LED R
				}
        // Начать поиск нового пакета
        IndexPaketBayt = 0;
        Bit8_n = 0; // Завершить приём этого пакета
        Bit0 = 1; // Начать поиск нулевого бита преамбулы
      }
    }   
  }
}


void main(void)
{
	char FlagOwerflow; // Пользовательский флаг потери предыдущего пакета

// Crystal Oscillator division factor: 1
#pragma optsize -
  CLKPR = (1 << CLKPCE);
  CLKPR = (0 << CLKPCE) | (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
#ifdef _OPTIMIZE_SIZE_
#pragma optsize +
#endif

  // Input/Output Ports initialization
  // Port A initialization
  // Function: Bit2=In Bit1=In Bit0=In
  DDRA = (0 << DDA2) | (0 << DDA1) | (0 << DDA0);
  // State: Bit2=T Bit1=T Bit0=T
  PORTA = (0 << PORTA2) | (0 << PORTA1) | (0 << PORTA0);

  // Port B initialization
  // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out
  DDRB = (1 << DDB7) | (1 << DDB6) | (1 << DDB5) | (0 << DDB4) | (1 << DDB3) | (1 << DDB2) | (1 << DDB1) | (1 << DDB0);
  // State: Bit7=0 Bit6=0 Bit5=0 Bit4=P Bit3=0 Bit2=0 Bit1=0 Bit0=0
  PORTB = (0 << PORTB7) | (0 << PORTB6) | (0 << PORTB5) | (1 << PORTB4) | (0 << PORTB3) | (0 << PORTB2) | (0 << PORTB1) | (0 << PORTB0);

  // Port D initialization
  // Function: Bit6=Out Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=Out Bit0=Out
  DDRD = (1 << DDD6) | (1 << DDD5) | (1 << DDD4) | (0 << DDD3) | (0 << DDD2) | (1 << DDD1) | (1 << DDD0);
  // State: Bit6=0 Bit5=0 Bit4=0 Bit3=T Bit2=T Bit1=0 Bit0=0
  PORTD = (0 << PORTD6) | (0 << PORTD5) | (0 << PORTD4) | (0 << PORTD3) | (0 << PORTD2) | (0 << PORTD1) | (0 << PORTD0);

  // Timer/Counter 0 initialization
  // Clock source: System Clock
  // Clock value: 62,500 kHz
  // Mode: CTC top=OCR0A
  // OC0A output: Disconnected
  // OC0B output: Disconnected
  // Timer Period: 1,2 ms
  TCCR0A = (0 << COM0A1) | (0 << COM0A0) | (0 << COM0B1) | (0 << COM0B0) | (1 << WGM01) | (0 << WGM00);
  TCCR0B = (0 << WGM02) | (0 << CS02) | (1 << CS01) | (1 << CS00);
  TCNT0 = 0x00;
  OCR0A = 0x4A;
  OCR0B = 0x00;

  // Timer/Counter 1 initialization
  // Clock source: System Clock
  // Clock value: 4000,000 kHz
  // Mode: CTC top=OCR1A
  // OC1A output: Disconnected
  // OC1B output: Disconnected
  // Noise Canceler: Off
  // Input Capture on Falling Edge
  // Timer Period: 1 ms
  // Timer1 Overflow Interrupt: Off
  // Input Capture Interrupt: Off
  // Compare A Match Interrupt: On
  // Compare B Match Interrupt: Off
  TCCR1A = (0 << COM1A1) | (0 << COM1A0) | (0 << COM1B1) | (0 << COM1B0) | (0 << WGM11) | (0 << WGM10);
  TCCR1B = (0 << ICNC1) | (0 << ICES1) | (0 << WGM13) | (1 << WGM12) | (0 << CS12) | (0 << CS11) | (1 << CS10);
  TCNT1H = 0x00;
  TCNT1L = 0x00;
  ICR1H = 0x00;
  ICR1L = 0x00;
  OCR1AH = 0x0F;
  OCR1AL = 0x9F;
  OCR1BH = 0x00;
  OCR1BL = 0x00;

  // Timer(s)/Counter(s) Interrupt(s) initialization
  TIMSK = (0 << TOIE1) | (1 << OCIE1A) | (0 << OCIE1B) | (0 << ICIE1) | (0 << OCIE0B) | (0 << TOIE0) | (0 << OCIE0A);

  // External Interrupt(s) initialization
  // INT0: On
  // INT0 Mode: Rising Edge
  // INT1: On
  // INT1 Mode: Falling Edge
  // Interrupt on any change on pins PCINT0-7: Off
  // Interrupt on any change on pins PCINT8-10: Off
  // Interrupt on any change on pins PCINT11-17: Off
  MCUCR = (1 << ISC11) | (0 << ISC10) | (1 << ISC01) | (1 << ISC00);
  GIMSK = (1 << INT1) | (1 << INT0) | (0 << PCIE0) | (0 << PCIE2) | (0 << PCIE1);
  GIFR = (1 << INTF1) | (1 << INTF0) | (0 << PCIF0) | (0 << PCIF2) | (0 << PCIF1);

  // USI initialization
  // Mode: Disabled
  // Clock source: Register & Counter=no clk.
  // USI Counter Overflow Interrupt: Off
  USICR = (0 << USISIE) | (0 << USIOIE) | (0 << USIWM1) | (0 << USIWM0) | (0 << USICS1) | (0 << USICS0) | (0 << USICLK) | (0 << USITC);

  // USART initialization
  // USART disabled
  UCSRB = (0 << RXCIE) | (0 << TXCIE) | (0 << UDRIE) | (0 << RXEN) | (0 << TXEN) | (0 << UCSZ2) | (0 << RXB8) | (0 << TXB8);

  // Analog Comparator initialization
  // Analog Comparator: Off
  // The Analog Comparator's positive input is
  // connected to the AIN0 pin
  // The Analog Comparator's negative input is
  // connected to the AIN1 pin
  ACSR = (1 << ACD) | (0 << ACBG) | (0 << ACO) | (0 << ACI) | (0 << ACIE) | (0 << ACIC) | (0 << ACIS1) | (0 << ACIS0);
  // Digital input buffer on AIN0: On
  // Digital input buffer on AIN1: On
  DIDR = (0 << AIN0D) | (0 << AIN1D);

// Globally enable interrupts
#asm("sei")

  while (1)
  {
  	// Получение пакета данных, принятые по радио-каналу 
    if (RadioRead(RadioPaketData, &FlagOwerflow) == 1)
    {
    	if ( (RadioPaketData[0] == 11) && 
    			 (RadioPaketData[1] == 22) && 
    		   (RadioPaketData[2] == 33) && 
    		   (RadioPaketData[3] == 44) && 
    		   (RadioPaketData[4] == 55))
    	{	
    		msLedB = 150;    
		    PORTB.3 = 1; // Включить LED B
    	}
    	if (FlagOwerflow == 1)
    	{
    		msLedG = 150;
    		PORTB.2 = 1; // Включить LED G
    	}
    }
    if (msLedR == 0)
      PORTB.0 = 0; // Выключить LED R             	
    if (msLedG == 0)
    	PORTB.2 = 0; // Выключить LED G
    if (msLedB == 0)
    	PORTB.3 = 0; // Выключить LED B	    	
  }
}
