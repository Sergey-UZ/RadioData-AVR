
AVRASM ver. 2.1.30  C:\Users\ASUS\Documents\_\CodeVisionAVR\Радио-данные\Передатчик v3\Debug\List\RadioPeredatchik.asm Wed Oct 25 10:09:20 2023

                 
                 
                 ;CodeVisionAVR C Compiler V3.40 Advanced
                 ;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATtiny45
                 ;Program type           : Application
                 ;Clock frequency        : 4,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 64 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': No
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATtiny45
                 	#pragma AVRPART MEMORY PROG_FLASH 4096
                 	#pragma AVRPART MEMORY EEPROM 256
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 256
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 
                 	.EQU WDTCR=0x21
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x11
                 	.EQU GPIOR1=0x12
                 	.EQU GPIOR2=0x13
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x015F
                 	.EQU __DSTACK_SIZE=0x0040
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	RCALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	RCALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION VALUES
                 	.EQU __GPIOR0_INIT=0x00
                 	.EQU __GPIOR1_INIT=0x00
                 	.EQU __GPIOR2_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c010      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 c03a      	RJMP _timer1_compa_isr
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
                 
                 _0x2001B:
C:\Users\ASUS\Documents\_\CodeVisionAVR\Радио-данные\Передатчик v3\Debug\List\RadioPeredatchik.asm(1080): warning: .cseg .db misalignment - padding zero byte
00000f 0001      	.DB  0x1
                 
                 __GLOBAL_INI_TBL:
                 _0xFFFFFFFF:
000010 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000011 94f8      	CLI
000012 27ee      	CLR  R30
000013 bbec      	OUT  EECR,R30
000014 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000015 e08d      	LDI  R24,(14-2)+1
000016 e0a2      	LDI  R26,2
000017 27bb      	CLR  R27
                 __CLEAR_REG:
000018 93ed      	ST   X+,R30
000019 958a      	DEC  R24
00001a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00001b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00001c e091      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00001d e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00001e 93ed      	ST   X+,R30
00001f 9701      	SBIW R24,1
000020 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000021 e2e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000022 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000023 9185      	LPM  R24,Z+
000024 9195      	LPM  R25,Z+
000025 9700      	SBIW R24,0
000026 f061      	BREQ __GLOBAL_INI_END
000027 91a5      	LPM  R26,Z+
000028 91b5      	LPM  R27,Z+
000029 9005      	LPM  R0,Z+
00002a 9015      	LPM  R1,Z+
00002b 01bf      	MOVW R22,R30
00002c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00002d 9005      	LPM  R0,Z+
00002e 920d      	ST   X+,R0
00002f 9701      	SBIW R24,1
000030 f7e1      	BRNE __GLOBAL_INI_LOOP
000031 01fb      	MOVW R30,R22
000032 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
000033 e0e0      	LDI  R30,__GPIOR0_INIT
000034 bbe1      	OUT  GPIOR0,R30
                 	;__GPIOR1_INIT = __GPIOR0_INIT
000035 bbe2      	OUT  GPIOR1,R30
                 	;__GPIOR2_INIT = __GPIOR0_INIT
000036 bbe3      	OUT  GPIOR2,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000037 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000038 bfed      	OUT  SPL,R30
000039 e0e1      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00003a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00003b eac0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00003c e0d0      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00003d c02c      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0xA0
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x18
                 	.EQU __sm_adc_noise_red=0x08
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_standby=0x18
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;const char TMR_SCHITAT_KNOPKU_NAZHATOY = 50;
                 ;volatile unsigned char tmr_knopki;
                 ;volatile unsigned char msLedR = 0;
                 ;interrupt[TIM1_COMPA] void timer1_compa_isr(void);
                 ;void main(void);
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 0030 {
                 
                 	.CSEG
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
00003e 920a      	ST   -Y,R0
00003f 921a      	ST   -Y,R1
000040 92fa      	ST   -Y,R15
000041 936a      	ST   -Y,R22
000042 937a      	ST   -Y,R23
000043 938a      	ST   -Y,R24
000044 939a      	ST   -Y,R25
000045 93aa      	ST   -Y,R26
000046 93ba      	ST   -Y,R27
000047 93ea      	ST   -Y,R30
000048 93fa      	ST   -Y,R31
000049 b7ef      	IN   R30,SREG
00004a 93ea      	ST   -Y,R30
                 ; 0000 0031 RadioPeredacha();
00004b d0b6      	RCALL _RadioPeredacha
                 ; 0000 0032 
                 ; 0000 0033 //RadioPeredachaMeandr();
                 ; 0000 0034 
                 ; 0000 0035 if (tmr_knopki != 0)
00004c 91e0 00a0 	LDS  R30,_tmr_knopki
00004e 30e0      	CPI  R30,0
00004f f029      	BREQ _0x3
                 ; 0000 0036 --tmr_knopki;
000050 91e0 00a0 	LDS  R30,_tmr_knopki
000052 50e1      	SUBI R30,LOW(1)
000053 93e0 00a0 	STS  _tmr_knopki,R30
                 ; 0000 0037 if (msLedR != 0)
                 _0x3:
000055 d108      	RCALL SUBOPT_0x0
000056 30e0      	CPI  R30,0
000057 f021      	BREQ _0x4
                 ; 0000 0038 --msLedR;
000058 d105      	RCALL SUBOPT_0x0
000059 50e1      	SUBI R30,LOW(1)
00005a 93e0 00a1 	STS  _msLedR,R30
                 ; 0000 0039 }
                 _0x4:
00005c 91e9      	LD   R30,Y+
00005d bfef      	OUT  SREG,R30
00005e 91f9      	LD   R31,Y+
00005f 91e9      	LD   R30,Y+
000060 91b9      	LD   R27,Y+
000061 91a9      	LD   R26,Y+
000062 9199      	LD   R25,Y+
000063 9189      	LD   R24,Y+
000064 9179      	LD   R23,Y+
000065 9169      	LD   R22,Y+
000066 90f9      	LD   R15,Y+
000067 9019      	LD   R1,Y+
000068 9009      	LD   R0,Y+
000069 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 003C {
                 _main:
                 ; .FSTART _main
                 ; 0000 003D // Пользовательский пакет данных для отправки по радио-каналу
                 ; 0000 003E char RadioPaketData[RADIO_PAKET_DATA_BAYT_COUNT];
                 ; 0000 003F // Флаг для кнопки
                 ; 0000 0040 char FlagKnopkaNazhata = 0;
                 ; 0000 0041 
                 ; 0000 0042 // Crystal Oscillator division factor: 1
                 ; 0000 0043 #pragma optsize-
                 ; 0000 0044 CLKPR=(1<<CLKPCE);
00006a 9725      	SBIW R28,5
                 ;	RadioPaketData -> Y+0
                 ;	FlagKnopkaNazhata -> R17
00006b e010      	LDI  R17,0
00006c e8e0      	LDI  R30,LOW(128)
00006d bde6      	OUT  0x26,R30
                 ; 0000 0045 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
00006e e0e0      	LDI  R30,LOW(0)
00006f bde6      	OUT  0x26,R30
                 ; 0000 0046 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0047 #pragma optsize+
                 ; 0000 0048 #endif
                 ; 0000 0049 
                 ; 0000 004A // Input/Output Ports initialization
                 ; 0000 004B // Port B initialization
                 ; 0000 004C // Function: Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=In Bit0=Out
                 ; 0000 004D DDRB=(0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (1<<DDB2) | (0<<DDB1) | (1<<DDB0);
000070 e0e5      	LDI  R30,LOW(5)
000071 bbe7      	OUT  0x17,R30
                 ; 0000 004E // State: Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=P Bit0=0
                 ; 0000 004F PORTB=(0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (1<<PORTB1) | (0<< ...
000072 e0e2      	LDI  R30,LOW(2)
000073 bbe8      	OUT  0x18,R30
                 ; 0000 0050 
                 ; 0000 0051 // Timer/Counter 0 initialization
                 ; 0000 0052 // Clock source: System Clock
                 ; 0000 0053 // Clock value: Timer 0 Stopped
                 ; 0000 0054 // Mode: Normal top=0xFF
                 ; 0000 0055 // OC0A output: Disconnected
                 ; 0000 0056 // OC0B output: Disconnected
                 ; 0000 0057 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<< ...
000074 e0e0      	LDI  R30,LOW(0)
000075 bdea      	OUT  0x2A,R30
                 ; 0000 0058 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000076 bfe3      	OUT  0x33,R30
                 ; 0000 0059 TCNT0=0x00;
000077 bfe2      	OUT  0x32,R30
                 ; 0000 005A OCR0A=0x00;
000078 bde9      	OUT  0x29,R30
                 ; 0000 005B OCR0B=0x00;
000079 bde8      	OUT  0x28,R30
                 ; 0000 005C 
                 ; 0000 005D // Timer/Counter 1 initialization
                 ; 0000 005E // Clock source: System Clock
                 ; 0000 005F // Clock value: 125,000 kHz
                 ; 0000 0060 // Mode: CTC top=OCR1C
                 ; 0000 0061 // OC1A output: Disconnected
                 ; 0000 0062 // OC1B output: Disconnected
                 ; 0000 0063 // Timer Period: 1,04 ms
                 ; 0000 0064 // Timer1 Overflow Interrupt: Off
                 ; 0000 0065 // Compare A Match Interrupt: On
                 ; 0000 0066 // Compare B Match Interrupt: Off
                 ; 0000 0067 PLLCSR=(0<<PCKE) | (0<<PLLE) | (0<<PLOCK);
00007a bde7      	OUT  0x27,R30
                 ; 0000 0068 
                 ; 0000 0069 TCCR1=(1<<CTC1) | (0<<PWM1A) | (0<<COM1A1) | (0<<COM1A0) | (0<<CS13) | (1<<CS12) ...
00007b e8e6      	LDI  R30,LOW(134)
00007c bfe0      	OUT  0x30,R30
                 ; 0000 006A GTCCR=(0<<TSM) | (0<<PWM1B) | (0<<COM1B1) | (0<<COM1B0) | (0<<PSR1) | (0<<PSR0);
00007d e0e0      	LDI  R30,LOW(0)
00007e bdec      	OUT  0x2C,R30
                 ; 0000 006B TCNT1=0x00;
00007f bdef      	OUT  0x2F,R30
                 ; 0000 006C OCR1A=0x00;
000080 bdee      	OUT  0x2E,R30
                 ; 0000 006D OCR1B=0x00;
000081 bdeb      	OUT  0x2B,R30
                 ; 0000 006E OCR1C=0x81;
000082 e8e1      	LDI  R30,LOW(129)
000083 bded      	OUT  0x2D,R30
                 ; 0000 006F 
                 ; 0000 0070 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0071 TIMSK=(1<<OCIE1A) | (0<<OCIE1B) | (0<<OCIE0A) | (0<<OCIE0B) | (0<<TOIE1) | (0<<T ...
000084 e4e0      	LDI  R30,LOW(64)
000085 bfe9      	OUT  0x39,R30
                 ; 0000 0072 
                 ; 0000 0073 // External Interrupt(s) initialization
                 ; 0000 0074 // INT0: Off
                 ; 0000 0075 // Interrupt on any change on pins PCINT0-5: Off
                 ; 0000 0076 GIMSK=(0<<INT0) | (0<<PCIE);
000086 e0e0      	LDI  R30,LOW(0)
000087 bfeb      	OUT  0x3B,R30
                 ; 0000 0077 MCUCR=(0<<ISC01) | (0<<ISC00);
000088 bfe5      	OUT  0x35,R30
                 ; 0000 0078 
                 ; 0000 0079 // USI initialization
                 ; 0000 007A // Mode: Disabled
                 ; 0000 007B // Clock source: Register & Counter=no clk.
                 ; 0000 007C // USI Counter Overflow Interrupt: Off
                 ; 0000 007D USICR=(0<<USISIE) | (0<<USIOIE) | (0<<USIWM1) | (0<<USIWM0) | (0<<USICS1) | (0<< ...
000089 b9ed      	OUT  0xD,R30
                 ; 0000 007E 
                 ; 0000 007F // Analog Comparator initialization
                 ; 0000 0080 // Analog Comparator: Off
                 ; 0000 0081 // The Analog Comparator's positive input is
                 ; 0000 0082 // connected to the AIN0 pin
                 ; 0000 0083 // The Analog Comparator's negative input is
                 ; 0000 0084 // connected to the AIN1 pin
                 ; 0000 0085 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIS1) | (0<<A ...
00008a e8e0      	LDI  R30,LOW(128)
00008b b9e8      	OUT  0x8,R30
                 ; 0000 0086 ADCSRB=(0<<ACME);
00008c e0e0      	LDI  R30,LOW(0)
00008d b9e3      	OUT  0x3,R30
                 ; 0000 0087 // Digital input buffer on AIN0: On
                 ; 0000 0088 // Digital input buffer on AIN1: On
                 ; 0000 0089 DIDR0=(0<<AIN0D) | (0<<AIN1D);
00008e bbe4      	OUT  0x14,R30
                 ; 0000 008A 
                 ; 0000 008B // ADC initialization
                 ; 0000 008C // ADC disabled
                 ; 0000 008D ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | ...
00008f b9e6      	OUT  0x6,R30
                 ; 0000 008E 
                 ; 0000 008F // Заполнение пользовательских данных
                 ; 0000 0090 RadioPaketData[0] = 11;
000090 e0eb      	LDI  R30,LOW(11)
000091 83e8      	ST   Y,R30
                 ; 0000 0091 RadioPaketData[1] = 22;
000092 e1e6      	LDI  R30,LOW(22)
000093 83e9      	STD  Y+1,R30
                 ; 0000 0092 RadioPaketData[2] = 33;
000094 e2e1      	LDI  R30,LOW(33)
000095 83ea      	STD  Y+2,R30
                 ; 0000 0093 RadioPaketData[3] = 44;
000096 e2ec      	LDI  R30,LOW(44)
000097 83eb      	STD  Y+3,R30
                 ; 0000 0094 RadioPaketData[4] = 55;
000098 e3e7      	LDI  R30,LOW(55)
000099 83ec      	STD  Y+4,R30
                 ; 0000 0095 
                 ; 0000 0096 // Globally enable interrupts
                 ; 0000 0097 #asm("sei")
00009a 9478      	SEI
                 ; 0000 0098 
                 ; 0000 0099 while (1)
                 _0x5:
                 ; 0000 009A {
                 ; 0000 009B // Определяет состояние кнопки (нажата она или нет)
                 ; 0000 009C if (BIT_RAVEN_0(PINB, 1))
00009b 99b1      	SBIC 0x16,1
00009c c01a      	RJMP _0x8
                 ; 0000 009D {
                 ; 0000 009E //Начать отсчёт общего времени нажатия на кнопку
                 ; 0000 009F //Запустить програмный таймер отсчёта времени нажатия на кнопку
                 ; 0000 00A0 tmr_knopki = TMR_SCHITAT_KNOPKU_NAZHATOY;
00009d e3e2      	LDI  R30,LOW(50)
00009e 93e0 00a0 	STS  _tmr_knopki,R30
                 ; 0000 00A1 //Пока кнопка нажата
                 ; 0000 00A2 while (BIT_RAVEN_0(PINB, 1))
                 _0x9:
0000a0 99b1      	SBIC 0x16,1
0000a1 c014      	RJMP _0xB
                 ; 0000 00A3 {
                 ; 0000 00A4 //Если кнопка была нажата положеное время, тогда
                 ; 0000 00A5 if (tmr_knopki == 0)
0000a2 91e0 00a0 	LDS  R30,_tmr_knopki
0000a4 30e0      	CPI  R30,0
0000a5 f459      	BRNE _0xC
                 ; 0000 00A6 {
                 ; 0000 00A7 if (FlagKnopkaNazhata == 0)
0000a6 3010      	CPI  R17,0
0000a7 f449      	BRNE _0xD
                 ; 0000 00A8 {
                 ; 0000 00A9 FlagKnopkaNazhata = 1;
0000a8 e011      	LDI  R17,LOW(1)
                 ; 0000 00AA if (RadioWrite(RadioPaketData) == 1)
0000a9 01de      	MOVW R26,R28
0000aa d02f      	RCALL _RadioWrite
0000ab 30e1      	CPI  R30,LOW(0x1)
0000ac f421      	BRNE _0xE
                 ; 0000 00AB {
                 ; 0000 00AC msLedR = 150;
0000ad e9e6      	LDI  R30,LOW(150)
0000ae 93e0 00a1 	STS  _msLedR,R30
                 ; 0000 00AD PORTB.0 = 1;
0000b0 9ac0      	SBI  0x18,0
                 ; 0000 00AE }
                 ; 0000 00AF }
                 _0xE:
                 ; 0000 00B0 }
                 _0xD:
                 ; 0000 00B1 if (msLedR == 0)
                 _0xC:
0000b1 d0ac      	RCALL SUBOPT_0x0
0000b2 30e0      	CPI  R30,0
0000b3 f409      	BRNE _0x11
                 ; 0000 00B2 PORTB.0 = 0;
0000b4 98c0      	CBI  0x18,0
                 ; 0000 00B3 }
                 _0x11:
0000b5 cfea      	RJMP _0x9
                 _0xB:
                 ; 0000 00B4 FlagKnopkaNazhata = 0;
0000b6 e010      	LDI  R17,LOW(0)
                 ; 0000 00B5 }
                 ; 0000 00B6 if (msLedR == 0)
                 _0x8:
0000b7 d0a6      	RCALL SUBOPT_0x0
0000b8 30e0      	CPI  R30,0
0000b9 f409      	BRNE _0x14
                 ; 0000 00B7 PORTB.0 = 0;
0000ba 98c0      	CBI  0x18,0
                 ; 0000 00B8 }
                 _0x14:
0000bb cfdf      	RJMP _0x5
                 ; 0000 00B9 }
                 _0x17:
0000bc cfff      	RJMP _0x17
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;volatile char RadioPaketOut[RADIO_PAKET_DATA_BAYT_COUNT + 2];
                 ;volatile char RadioPaketPeredacha = 0;
                 ;char CRC_8(char *Data, unsigned char Length_Data)
                 ; 0001 0022 {
                 
                 	.CSEG
                 _CRC_8:
                 ; .FSTART _CRC_8
                 ; 0001 0023 char Registr_CRC = 0xFF; // Начальное значение регистра CRC
                 ; 0001 0024 unsigned char i; // Индексная переменная
                 ; 0001 0025 
                 ; 0001 0026 while (Length_Data--)  //Вычислить CRC для блока данных
0000bd d0a9      	RCALL __SAVELOCR6
0000be 2f3a      	MOV  R19,R26
                +
0000bf 814e     +LDD R20 , Y + 6
0000c0 815f     +LDD R21 , Y + 6 + 1
                 	__GETWRS 20,21,6
                 ;	*Data -> R20,R21
                 ;	Length_Data -> R19
                 ;	Registr_CRC -> R17
                 ;	i -> R16
0000c1 ef1f      	LDI  R17,255
                 _0x20003:
0000c2 2fe3      	MOV  R30,R19
0000c3 5031      	SUBI R19,1
0000c4 30e0      	CPI  R30,0
0000c5 f081      	BREQ _0x20005
                 ; 0001 0027 {
                 ; 0001 0028 Registr_CRC ^= *Data++;
0000c6 01da      	MOVW R26,R20
                +
0000c7 5f4f     +SUBI R20 , LOW ( - 1 )
0000c8 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
0000c9 91ec      	LD   R30,X
0000ca 271e      	EOR  R17,R30
                 ; 0001 0029 for (i = 0; i < 8; i++)
0000cb e000      	LDI  R16,LOW(0)
                 _0x20007:
0000cc 3008      	CPI  R16,8
0000cd f438      	BRSH _0x20008
                 ; 0001 002A {
                 ; 0001 002B Registr_CRC >>= 1;
0000ce 9516      	LSR  R17
                 ; 0001 002C if ( (Registr_CRC & 0b00000001) != 0 )
0000cf ff10      	SBRS R17,0
0000d0 c002      	RJMP _0x20009
                 ; 0001 002D Registr_CRC ^= 0x31;
0000d1 e3e1      	LDI  R30,LOW(49)
0000d2 271e      	EOR  R17,R30
                 ; 0001 002E }
                 _0x20009:
0000d3 5f0f      	SUBI R16,-1
0000d4 cff7      	RJMP _0x20007
                 _0x20008:
                 ; 0001 002F }
0000d5 cfec      	RJMP _0x20003
                 _0x20005:
                 ; 0001 0030 return Registr_CRC;
0000d6 2fe1      	MOV  R30,R17
0000d7 d096      	RCALL __LOADLOCR6
0000d8 9628      	ADIW R28,8
0000d9 9508      	RET
                 ; 0001 0031 }
                 ; .FEND
                 ;char RadioWrite (char *Data)
                 ; 0001 0040 {
                 _RadioWrite:
                 ; .FSTART _RadioWrite
                 ; 0001 0041 unsigned char i; // Индексная переменная
                 ; 0001 0042 
                 ; 0001 0043 // Если радио-передатчик свободен
                 ; 0001 0044 if (RadioPaketPeredacha == 0)
0000da d08e      	RCALL __SAVELOCR4
0000db 019d      	MOVW R18,R26
                 ;	*Data -> R18,R19
                 ;	i -> R17
0000dc 91e0 00a9 	LDS  R30,_RadioPaketPeredacha
0000de 30e0      	CPI  R30,0
0000df f4f1      	BRNE _0x2000A
                 ; 0001 0045 {
                 ; 0001 0046 // Заполнение служебного пакета данными
                 ; 0001 0047 RadioPaketOut[0] = PREAMBULA;
0000e0 e5e5      	LDI  R30,LOW(85)
0000e1 93e0 00a2 	STS  _RadioPaketOut,R30
                 ; 0001 0048 for (i = 0; i < RADIO_PAKET_DATA_BAYT_COUNT; i++)
0000e3 e010      	LDI  R17,LOW(0)
                 _0x2000C:
0000e4 3015      	CPI  R17,5
0000e5 f470      	BRSH _0x2000D
                 ; 0001 0049 RadioPaketOut[i+1] = Data[i];
0000e6 2fe1      	MOV  R30,R17
0000e7 e0f0      	LDI  R31,0
                +
0000e8 55ed     +SUBI R30 , LOW ( - _RadioPaketOut - ( 1 ) )
0000e9 4fff     +SBCI R31 , HIGH ( - _RadioPaketOut - ( 1 ) )
                 	__ADDW1MN _RadioPaketOut,1
0000ea 010f      	MOVW R0,R30
0000eb 01d9      	MOVW R26,R18
0000ec 27ee      	CLR  R30
0000ed 0fa1      	ADD  R26,R17
0000ee 1fbe      	ADC  R27,R30
0000ef 91ec      	LD   R30,X
0000f0 01d0      	MOVW R26,R0
0000f1 93ec      	ST   X,R30
0000f2 5f1f      	SUBI R17,-1
0000f3 cff0      	RJMP _0x2000C
                 _0x2000D:
                 ; 0001 004A RadioPaketOut[5 + 1] = CRC_8(Data, 5);
0000f4 933a      	ST   -Y,R19
0000f5 932a      	ST   -Y,R18
0000f6 e0a5      	LDI  R26,LOW(5)
0000f7 dfc5      	RCALL _CRC_8
                +
0000f8 93e0 00a8+STS _RadioPaketOut + ( 6 ) , R30
                 	__PUTB1MN _RadioPaketOut,6
                 ; 0001 004B RadioPaketPeredacha = 1; // Разрешить передачу данных по радио-каналу
0000fa e0e1      	LDI  R30,LOW(1)
0000fb 93e0 00a9 	STS  _RadioPaketPeredacha,R30
                 ; 0001 004C return 1;
0000fd c001      	RJMP _0x2000001
                 ; 0001 004D }
                 ; 0001 004E else
                 _0x2000A:
                 ; 0001 004F return 0;
0000fe e0e0      	LDI  R30,LOW(0)
                 ; 0001 0050 }
                 _0x2000001:
0000ff d070      	RCALL __LOADLOCR4
000100 9624      	ADIW R28,4
000101 9508      	RET
                 ; .FEND
                 ;void RadioPeredacha(void)
                 ; 0001 0055 {
                 _RadioPeredacha:
                 ; .FSTART _RadioPeredacha
                 ; 0001 0056 static unsigned char IndexBayt = 0; // Индекс байта
                 ; 0001 0057 static unsigned char IndexPaketBayt = 0; // Индекс пакета байтов
                 ; 0001 0058 static char Bit1, Bit0 = 0;
                 ; 0001 0059 static char StartBit = 0; // Для передачи 1-ного стартового бита
                 ; 0001 005A /*
                 ; 0001 005B После выставления последнего выходного сигнала
                 ; 0001 005C отсчитать один периуд и завершить передачу
                 ; 0001 005D */
                 ; 0001 005E static char FlagPeriudPoslednegoBita = 0;
                 ; 0001 005F 
                 ; 0001 0060 // Есть данные для передачи по радио-каналу
                 ; 0001 0061 if (RadioPaketPeredacha == 1)
000102 91a0 00a9 	LDS  R26,_RadioPaketPeredacha
000104 30a1      	CPI  R26,LOW(0x1)
000105 f009      	BREQ PC+2
000106 c056      	RJMP _0x2000F
                 ; 0001 0062 {
                 ; 0001 0063 if (FlagPeriudPoslednegoBita == 0)
000107 91e0 00af 	LDS  R30,_FlagPeriudPoslednegoBita_S0010002000
000109 30e0      	CPI  R30,0
00010a f009      	BREQ PC+2
00010b c049      	RJMP _0x20010
                 ; 0001 0064 {
                 ; 0001 0065 // Передача стартового бита
                 ; 0001 0066 if (StartBit == 0)
00010c 91e0 00ae 	LDS  R30,_StartBit_S0010002000
00010e 30e0      	CPI  R30,0
00010f f429      	BRNE _0x20011
                 ; 0001 0067 {
                 ; 0001 0068 StartBit = 1;
000110 e0e1      	LDI  R30,LOW(1)
000111 93e0 00ae 	STS  _StartBit_S0010002000,R30
                 ; 0001 0069 BIT_1(RADIO_SIGNAL_OUT_PORTX, RADIO_SIGNAL_OUT_PIN);
000113 9ac2      	SBI  0x18,2
                 ; 0001 006A return;
000114 9508      	RET
                 ; 0001 006B }
                 ; 0001 006C // Передача 1 байта данных (манчестерское кодирование)
                 ; 0001 006D if (BIT_RAVEN_0 (RadioPaketOut[IndexPaketBayt], IndexBayt))
                 _0x20011:
000115 91e0 00ab 	LDS  R30,_IndexPaketBayt_S0010002000
000117 e0f0      	LDI  R31,0
000118 55ee      	SUBI R30,LOW(-_RadioPaketOut)
000119 4fff      	SBCI R31,HIGH(-_RadioPaketOut)
00011a 8010      	LD   R1,Z
00011b 91e0 00aa 	LDS  R30,_IndexBayt_S0010002000
00011d e0a1      	LDI  R26,LOW(1)
00011e d056      	RCALL __LSLB12
00011f 21e1      	AND  R30,R1
000120 f479      	BRNE _0x20012
                 ; 0001 006E {
                 ; 0001 006F // Выходной бит данных 0 --- передаётся как сначало 0 потом 1
                 ; 0001 0070 if (Bit0 == 0)
000121 91e0 00ad 	LDS  R30,_Bit0_S0010002000
000123 30e0      	CPI  R30,0
000124 f429      	BRNE _0x20013
                 ; 0001 0071 {
                 ; 0001 0072 BIT_0(RADIO_SIGNAL_OUT_PORTX, RADIO_SIGNAL_OUT_PIN);
000125 98c2      	CBI  0x18,2
                 ; 0001 0073 Bit0 = 1;
000126 e0e1      	LDI  R30,LOW(1)
000127 93e0 00ad 	STS  _Bit0_S0010002000,R30
                 ; 0001 0074 }
                 ; 0001 0075 else
000129 c005      	RJMP _0x20014
                 _0x20013:
                 ; 0001 0076 {
                 ; 0001 0077 BIT_1(RADIO_SIGNAL_OUT_PORTX, RADIO_SIGNAL_OUT_PIN);
00012a 9ac2      	SBI  0x18,2
                 ; 0001 0078 Bit0 = 0;
00012b e0e0      	LDI  R30,LOW(0)
00012c 93e0 00ad 	STS  _Bit0_S0010002000,R30
                 ; 0001 0079 ++IndexBayt;
00012e d032      	RCALL SUBOPT_0x1
                 ; 0001 007A }
                 _0x20014:
                 ; 0001 007B }
                 ; 0001 007C else // Выходной бит данных 1 --- передаётся как сначало 1 потом 0
00012f c00e      	RJMP _0x20015
                 _0x20012:
                 ; 0001 007D {
                 ; 0001 007E if (Bit1 == 0)
000130 91e0 00ac 	LDS  R30,_Bit1_S0010002000
000132 30e0      	CPI  R30,0
000133 f429      	BRNE _0x20016
                 ; 0001 007F {
                 ; 0001 0080 BIT_1(RADIO_SIGNAL_OUT_PORTX, RADIO_SIGNAL_OUT_PIN);
000134 9ac2      	SBI  0x18,2
                 ; 0001 0081 Bit1 = 1;
000135 e0e1      	LDI  R30,LOW(1)
000136 93e0 00ac 	STS  _Bit1_S0010002000,R30
                 ; 0001 0082 }
                 ; 0001 0083 else
000138 c005      	RJMP _0x20017
                 _0x20016:
                 ; 0001 0084 {
                 ; 0001 0085 BIT_0(RADIO_SIGNAL_OUT_PORTX, RADIO_SIGNAL_OUT_PIN);
000139 98c2      	CBI  0x18,2
                 ; 0001 0086 Bit1 = 0;
00013a e0e0      	LDI  R30,LOW(0)
00013b 93e0 00ac 	STS  _Bit1_S0010002000,R30
                 ; 0001 0087 ++IndexBayt;
00013d d023      	RCALL SUBOPT_0x1
                 ; 0001 0088 }
                 _0x20017:
                 ; 0001 0089 }
                 _0x20015:
                 ; 0001 008A // Отправлен ещё 1 байт данных
                 ; 0001 008B if (IndexBayt == 8)
00013e 91a0 00aa 	LDS  R26,_IndexBayt_S0010002000
000140 30a8      	CPI  R26,LOW(0x8)
000141 f491      	BRNE _0x20018
                 ; 0001 008C {
                 ; 0001 008D IndexBayt = 0;
000142 e0e0      	LDI  R30,LOW(0)
000143 93e0 00aa 	STS  _IndexBayt_S0010002000,R30
                 ; 0001 008E ++IndexPaketBayt;
000145 91e0 00ab 	LDS  R30,_IndexPaketBayt_S0010002000
000147 5fef      	SUBI R30,-LOW(1)
000148 93e0 00ab 	STS  _IndexPaketBayt_S0010002000,R30
                 ; 0001 008F // Передача всего пакета данных завершена
                 ; 0001 0090 if (IndexPaketBayt == (RADIO_PAKET_DATA_BAYT_COUNT + 2))
00014a 91a0 00ab 	LDS  R26,_IndexPaketBayt_S0010002000
00014c 30a7      	CPI  R26,LOW(0x7)
00014d f431      	BRNE _0x20019
                 ; 0001 0091 {
                 ; 0001 0092 // Остался последний периуд
                 ; 0001 0093 IndexPaketBayt = 0;
00014e e0e0      	LDI  R30,LOW(0)
00014f 93e0 00ab 	STS  _IndexPaketBayt_S0010002000,R30
                 ; 0001 0094 FlagPeriudPoslednegoBita = 1;
000151 e0e1      	LDI  R30,LOW(1)
000152 93e0 00af 	STS  _FlagPeriudPoslednegoBita_S0010002000,R30
                 ; 0001 0095 }
                 ; 0001 0096 }
                 _0x20019:
                 ; 0001 0097 }
                 _0x20018:
                 ; 0001 0098 else // Передача завершена
000154 c008      	RJMP _0x2001A
                 _0x20010:
                 ; 0001 0099 {
                 ; 0001 009A FlagPeriudPoslednegoBita = 0;
000155 e0e0      	LDI  R30,LOW(0)
000156 93e0 00af 	STS  _FlagPeriudPoslednegoBita_S0010002000,R30
                 ; 0001 009B StartBit = 0;
000158 93e0 00ae 	STS  _StartBit_S0010002000,R30
                 ; 0001 009C BIT_0(RADIO_SIGNAL_OUT_PORTX, RADIO_SIGNAL_OUT_PIN);
00015a 98c2      	CBI  0x18,2
                 ; 0001 009D RadioPaketPeredacha = 0;
00015b 93e0 00a9 	STS  _RadioPaketPeredacha,R30
                 ; 0001 009E }
                 _0x2001A:
                 ; 0001 009F }
                 ; 0001 00A0 }
                 _0x2000F:
00015d 9508      	RET
                 ; .FEND
                 ;void RadioPeredachaMeandr (void)
                 ; 0001 00A5 {
                 ; 0001 00A6 static char BitOut = 1;
                 
                 	.DSEG
                 
                 	.CSEG
                 ; 0001 00A7 
                 ; 0001 00A8 if (BitOut == 1)
                 ; 0001 00A9 {
                 ; 0001 00AA BIT_1(RADIO_SIGNAL_OUT_PORTX, RADIO_SIGNAL_OUT_PIN);
                 ; 0001 00AB BitOut = 0;
                 ; 0001 00AC }
                 ; 0001 00AD else
                 ; 0001 00AE {
                 ; 0001 00AF BIT_0(RADIO_SIGNAL_OUT_PORTX, RADIO_SIGNAL_OUT_PIN);
                 ; 0001 00B0 BitOut = 1;
                 ; 0001 00B1 }
                 ; 0001 00B2 }
                 
                 	.DSEG
                 _tmr_knopki:
0000a0           	.BYTE 0x1
                 _msLedR:
0000a1           	.BYTE 0x1
                 _RadioPaketOut:
0000a2           	.BYTE 0x7
                 _RadioPaketPeredacha:
0000a9           	.BYTE 0x1
                 _IndexBayt_S0010002000:
0000aa           	.BYTE 0x1
                 _IndexPaketBayt_S0010002000:
0000ab           	.BYTE 0x1
                 _Bit1_S0010002000:
0000ac           	.BYTE 0x1
                 _Bit0_S0010002000:
0000ad           	.BYTE 0x1
                 _StartBit_S0010002000:
0000ae           	.BYTE 0x1
                 _FlagPeriudPoslednegoBita_S0010002000:
0000af           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00015e 91e0 00a1 	LDS  R30,_msLedR
000160 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
000161 91e0 00aa 	LDS  R30,_IndexBayt_S0010002000
000163 5fef      	SUBI R30,-LOW(1)
000164 93e0 00aa 	STS  _IndexBayt_S0010002000,R30
000166 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000167 935a      	ST   -Y,R21
                 __SAVELOCR5:
000168 934a      	ST   -Y,R20
                 __SAVELOCR4:
000169 933a      	ST   -Y,R19
                 __SAVELOCR3:
00016a 932a      	ST   -Y,R18
                 __SAVELOCR2:
00016b 931a      	ST   -Y,R17
00016c 930a      	ST   -Y,R16
00016d 9508      	RET
                 
                 __LOADLOCR6:
00016e 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00016f 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000170 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000171 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000172 8119      	LDD  R17,Y+1
000173 8108      	LD   R16,Y
000174 9508      	RET
                 
                 __LSLB12:
000175 23ee      	TST  R30
000176 2e0e      	MOV  R0,R30
000177 2fea      	MOV  R30,R26
000178 f019      	BREQ __LSLB12R
                 __LSLB12L:
000179 0fee      	LSL  R30
00017a 940a      	DEC  R0
00017b f7e9      	BRNE __LSLB12L
                 __LSLB12R:
00017c 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATtiny45 register use summary:
r0 :  10 r1 :   5 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   5 r17:  17 r18:   5 r19:   6 r20:   5 r21:   4 r22:   4 r23:   2 
r24:   9 r25:   4 r26:  21 r27:   5 r28:   5 r29:   1 r30: 151 r31:   7 
x  :   6 y  :  45 z  :   8 
Registers used: 22 out of 35 (62.9%)

ATtiny45 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   2 and   :   1 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   7 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  16 brpl  :   0 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :   5 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   3 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 
cpc   :   0 cpi   :  18 cpse  :   0 dec   :   2 des   :   0 eor   :   2 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 
inc   :   0 ld    :  16 ldd   :   7 ldi   :  54 lds   :  16 lpm   :   7 
lsl   :   1 lsr   :   1 mov   :   6 movw  :   9 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  32 
pop   :   0 push  :   0 rcall :  14 ret   :   9 reti  :   1 rjmp  :  33 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   3 sbi   :   4 sbic  :   2 
sbis  :   0 sbiw  :   4 sbr   :   0 sbrc  :   0 sbrs  :   1 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  25 std   :   4 
sts   :  20 sub   :   0 subi  :  10 swap  :   0 tst   :   1 wdr   :   0 

Instructions used: 39 out of 114 (34.2%)

ATtiny45 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002fa    758      4    762    4096  18.6%
[.dseg] 0x000060 0x0000b0      0     16     16     256   6.3%
[.eseg] 0x000000 0x000000      0      0      0     256   0.0%

Assembly complete, 0 errors, 1 warnings
