;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;volatile unsigned char msLedB = 0; // Переменная для подсчёта миллисекунд для LE ...
;volatile unsigned char msLedR = 0; // Переменная для подсчёта миллисекунд для LE ...
;interrupt [TIM2_COMP] void timer2_comp_isr(void)
; 0000 002A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002B if (msLedB != 0)
;PCODE: $0000000F VOL: 1
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 002C --msLedB;
;PCODE: $00000012 VOL: 1
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 1
; 0000 002D if (msLedR != 0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 1
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 002E --msLedR;
;PCODE: $00000019 VOL: 1
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 1
; 0000 002F }
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;interrupt [ADC_INT] void adc_isr(void)
; 0000 0034 {
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0035 RadioPriem();
;PCODE: $00000022 VOL: 0
; 0000 0036 }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;void main(void)
; 0000 003A {
;PCODE: $00000026 VOL: 0
; 0000 003B // Пользовательский пакет данных содержащий принятые по радио-каналу данные
; 0000 003C char RadioPaketData[RADIO_PAKET_DATA_BAYT_COUNT];
; 0000 003D char FlagOwerflow; // Пользовательский флаг потери предыдущего пакета
; 0000 003E 
; 0000 003F // Input/Output Ports initialization
; 0000 0040 // Port B initialization
; 0000 0041 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=In
; 0000 0042 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (1<<DDB2) | (1< ...
;PCODE: $00000027 VOL: 0
;	RadioPaketData -> Y+0
;	FlagOwerflow -> R17
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0043 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=0 Bit0=T
; 0000 0044 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<< ...
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0045 
; 0000 0046 // Port C initialization
; 0000 0047 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0048 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0< ...
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0049 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 004A PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<< ...
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 004B 
; 0000 004C // Port D initialization
; 0000 004D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 004E DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0< ...
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 004F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0050 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<< ...
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0051 
; 0000 0052 // Timer/Counter 0 initialization
; 0000 0053 // Clock source: System Clock
; 0000 0054 // Clock value: Timer 0 Stopped
; 0000 0055 TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0056 TCNT0=0x00;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0057 
; 0000 0058 // Timer/Counter 1 initialization
; 0000 0059 // Clock source: System Clock
; 0000 005A // Clock value: Timer1 Stopped
; 0000 005B // Mode: Normal top=0xFFFF
; 0000 005C // OC1A output: Disconnected
; 0000 005D // OC1B output: Disconnected
; 0000 005E // Noise Canceler: Off
; 0000 005F // Input Capture on Falling Edge
; 0000 0060 // Timer1 Overflow Interrupt: Off
; 0000 0061 // Input Capture Interrupt: Off
; 0000 0062 // Compare A Match Interrupt: Off
; 0000 0063 // Compare B Match Interrupt: Off
; 0000 0064 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<< ...
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0065 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) ...
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0066 TCNT1H=0x00;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0067 TCNT1L=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0068 ICR1H=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0069 ICR1L=0x00;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 006A OCR1AH=0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 006B OCR1AL=0x00;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 006C OCR1BH=0x00;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 006D OCR1BL=0x00;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 006E 
; 0000 006F // Timer/Counter 2 initialization
; 0000 0070 // Clock source: System Clock
; 0000 0071 // Clock value: 125,000 kHz
; 0000 0072 // Mode: CTC top=OCR2A
; 0000 0073 // OC2 output: Disconnected
; 0000 0074 // Timer Period: 1 ms
; 0000 0075 ASSR=0<<AS2;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0076 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (1<<CTC2) | (0<<CS22) | (1<<CS21) |  ...
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0077 TCNT2=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0078 OCR2=0x7C;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0079 
; 0000 007A // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 007B TIMSK=(1<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TO ...
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 007C 
; 0000 007D // External Interrupt(s) initialization
; 0000 007E // INT0: Off
; 0000 007F // INT1: Off
; 0000 0080 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0081 
; 0000 0082 // USART initialization
; 0000 0083 // USART disabled
; 0000 0084 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2)  ...
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0085 
; 0000 0086 // Analog Comparator initialization
; 0000 0087 // Analog Comparator: Off
; 0000 0088 // The Analog Comparator's positive input is
; 0000 0089 // connected to the AIN0 pin
; 0000 008A // The Analog Comparator's negative input is
; 0000 008B // connected to the AIN1 pin
; 0000 008C ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<AC ...
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 008D 
; 0000 008E // ADC initialization
; 0000 008F // ADC Clock frequency: 125,000 kHz
; 0000 0090 // ADC Voltage Reference: AVCC pin
; 0000 0091 ADMUX=ADC_VREF_TYPE;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0092 ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADFR) | (0<<ADIF) | (1<<ADIE) | (1<<ADPS2) |  ...
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0093 //SFIOR=(0<<ACME);
; 0000 0094 
; 0000 0095 // SPI initialization
; 0000 0096 // SPI disabled
; 0000 0097 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<< ...
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0098 
; 0000 0099 // TWI initialization
; 0000 009A // TWI disabled
; 0000 009B TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 009C 
; 0000 009D // Globally enable interrupts
; 0000 009E #asm("sei")
;PCODE: $00000064 VOL: 0
; 0000 009F 
; 0000 00A0 while (1)
;PCODE: $00000065 VOL: 0
; 0000 00A1 {
; 0000 00A2 // Получение пакета данных, принятые по радио-каналу
; 0000 00A3 if (RadioRead(RadioPaketData, &FlagOwerflow) == 1)
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 00A4 {
; 0000 00A5 if ( (RadioPaketData[0] == 11) &&
; 0000 00A6 (RadioPaketData[1] == 22) &&
; 0000 00A7 (RadioPaketData[2] == 33) &&
; 0000 00A8 (RadioPaketData[3] == 44) &&
; 0000 00A9 (RadioPaketData[4] == 55))
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00AA {
; 0000 00AB msLedB = 150;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 1
; 0000 00AC PORTB.2 = 1; // Включить LED B
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00AD }
; 0000 00AE if (FlagOwerflow == 1)
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00AF {
; 0000 00B0 msLedR = 150;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 1
; 0000 00B1 PORTB.1 = 1; // Включить LED R
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00B2 }
; 0000 00B3 }
;PCODE: $0000008D VOL: 0
; 0000 00B4 if (msLedR == 0)
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 1
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00B5 PORTB.1 = 0; // Выключить LED R
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00B6 if (msLedB == 0)
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 1
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00B7 PORTB.2 = 0; // Выключить LED B
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00B8 }
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00B9 }
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
