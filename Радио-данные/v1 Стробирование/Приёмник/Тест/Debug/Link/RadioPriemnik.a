;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;volatile unsigned char msLedG = 0; // Переменная для подсчёта миллисекунд для LE ...
;volatile unsigned char msLedB = 0; // Переменная для подсчёта миллисекунд для LE ...
;interrupt [TIM1_COMPA] void timer1_compa_isr(void);
;void main(void);
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 002A {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 002B static unsigned char Periud_1ms = 8;

	.DSEG

	.CSEG
; 0000 002C 
; 0000 002D RadioPriem();
;PCODE: $0000000C VOL: 0
; 0000 002E 
; 0000 002F if (Periud_1ms != 0)
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0030 {
; 0000 0031 --Periud_1ms;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0032 // Прошёл периуд 1мс
; 0000 0033 if (Periud_1ms == 0)
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0034 {
; 0000 0035 Periud_1ms = 8;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0036 if (msLedG != 0)
;PCODE: $00000018 VOL: 1
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0037 --msLedG;
;PCODE: $0000001B VOL: 1
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 1
; 0000 0038 if (msLedB != 0)
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 1
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0039 --msLedB;
;PCODE: $00000022 VOL: 1
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 1
; 0000 003A }
;PCODE: $00000025 VOL: 0
; 0000 003B }
;PCODE: $00000026 VOL: 0
; 0000 003C }
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;void main(void)
; 0000 0040 {
;PCODE: $0000002B VOL: 0
; 0000 0041 // Пользовательский пакет данных содержащий принятые по радио-каналу данные
; 0000 0042 char RadioPaketData[RADIO_PAKET_DATA_BAYT_COUNT];
; 0000 0043 char FlagOwerflow; // Пользовательский флаг потери предыдущего пакета
; 0000 0044 // Crystal Oscillator division factor: 1
; 0000 0045 #pragma optsize-
; 0000 0046 CLKPR=(1<<CLKPCE);
;PCODE: $0000002C VOL: 0
;	RadioPaketData -> Y+0
;	FlagOwerflow -> R17
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0047 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0048 #ifdef _OPTIMIZE_SIZE_
; 0000 0049 #pragma optsize+
; 0000 004A #endif
; 0000 004B 
; 0000 004C // Input/Output Ports initialization
; 0000 004D // Port A initialization
; 0000 004E // Function: Bit2=In Bit1=In Bit0=In
; 0000 004F DDRA=(0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0050 // State: Bit2=T Bit1=T Bit0=T
; 0000 0051 PORTA=(0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0052 
; 0000 0053 // Port B initialization
; 0000 0054 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=Out Bit1=In Bit0=In
; 0000 0055 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (0< ...
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0056 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=0 Bit1=T Bit0=T
; 0000 0057 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<< ...
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0058 
; 0000 0059 // Port D initialization
; 0000 005A // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 005B DDRD=(0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0< ...
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 005C // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 005D PORTD=(0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<< ...
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 005E 
; 0000 005F // Timer/Counter 0 initialization
; 0000 0060 // Clock source: System Clock
; 0000 0061 // Clock value: Timer 0 Stopped
; 0000 0062 // Mode: Normal top=0xFF
; 0000 0063 // OC0A output: Disconnected
; 0000 0064 // OC0B output: Disconnected
; 0000 0065 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<< ...
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0066 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0067 TCNT0=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0068 OCR0A=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0069 OCR0B=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 006A 
; 0000 006B // Timer/Counter 1 initialization
; 0000 006C // Clock source: System Clock
; 0000 006D // Clock value: 4000,000 kHz
; 0000 006E // Mode: CTC top=OCR1A
; 0000 006F // OC1A output: Disconnected
; 0000 0070 // OC1B output: Disconnected
; 0000 0071 // Noise Canceler: Off
; 0000 0072 // Input Capture on Falling Edge
; 0000 0073 // Timer Period: 0,125 ms
; 0000 0074 // Timer1 Overflow Interrupt: Off
; 0000 0075 // Input Capture Interrupt: Off
; 0000 0076 // Compare A Match Interrupt: On
; 0000 0077 // Compare B Match Interrupt: Off
; 0000 0078 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<< ...
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0079 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) ...
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 007A TCNT1H=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 007B TCNT1L=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 007C ICR1H=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 007D ICR1L=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 007E OCR1AH=0x01;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 007F OCR1AL=0xF3;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0080 OCR1BH=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0081 OCR1BL=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0082 
; 0000 0083 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0084 TIMSK=(0<<TOIE1) | (1<<OCIE1A) | (0<<OCIE1B) | (0<<ICIE1) | (0<<OCIE0B) | (0<<TO ...
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0085 
; 0000 0086 // External Interrupt(s) initialization
; 0000 0087 // INT0: Off
; 0000 0088 // INT1: Off
; 0000 0089 // Interrupt on any change on pins PCINT0-7: Off
; 0000 008A // Interrupt on any change on pins PCINT8-10: Off
; 0000 008B // Interrupt on any change on pins PCINT11-17: Off
; 0000 008C MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 008D GIMSK=(0<<INT1) | (0<<INT0) | (0<<PCIE0) | (0<<PCIE2) | (0<<PCIE1);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 008E 
; 0000 008F // USI initialization
; 0000 0090 // Mode: Disabled
; 0000 0091 // Clock source: Register & Counter=no clk.
; 0000 0092 // USI Counter Overflow Interrupt: Off
; 0000 0093 USICR=(0<<USISIE) | (0<<USIOIE) | (0<<USIWM1) | (0<<USIWM0) | (0<<USICS1) | (0<< ...
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0094 
; 0000 0095 // USART initialization
; 0000 0096 // USART disabled
; 0000 0097 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2)  ...
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0098 
; 0000 0099 // Analog Comparator initialization
; 0000 009A // Analog Comparator: Off
; 0000 009B // The Analog Comparator's positive input is
; 0000 009C // connected to the AIN0 pin
; 0000 009D // The Analog Comparator's negative input is
; 0000 009E // connected to the AIN1 pin
; 0000 009F ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<AC ...
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 00A0 // Digital input buffer on AIN0: On
; 0000 00A1 // Digital input buffer on AIN1: On
; 0000 00A2 DIDR=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00A3 
; 0000 00A4 
; 0000 00A5 // Globally enable interrupts
; 0000 00A6 #asm("sei")
;PCODE: $00000069 VOL: 0
; 0000 00A7 
; 0000 00A8 while (1)
;PCODE: $0000006A VOL: 0
; 0000 00A9 {
; 0000 00AA // Получение пакета данных, принятые по радио-каналу
; 0000 00AB if (RadioRead(RadioPaketData, &FlagOwerflow) == 1)
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00AC {
; 0000 00AD if ( (RadioPaketData[0] == 11) &&
; 0000 00AE (RadioPaketData[1] == 22) &&
; 0000 00AF (RadioPaketData[2] == 33) &&
; 0000 00B0 (RadioPaketData[3] == 44) &&
; 0000 00B1 (RadioPaketData[4] == 55))
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00B2 {
; 0000 00B3 msLedB = 150;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 1
; 0000 00B4 PORTB.3 = 1; // Включить LED B
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00B5 }
; 0000 00B6 if (FlagOwerflow == 1)
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00B7 {
; 0000 00B8 msLedG = 150;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 1
; 0000 00B9 PORTB.2 = 1; // Включить LED G
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00BA }
; 0000 00BB }
;PCODE: $00000092 VOL: 0
; 0000 00BC if (msLedG == 0)
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 1
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00BD PORTB.2 = 0; // Выключить LED G
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00BE if (msLedB == 0)
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 1
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00BF PORTB.3 = 0; // Выключить LED B
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00C0 }
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00C1 }
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
