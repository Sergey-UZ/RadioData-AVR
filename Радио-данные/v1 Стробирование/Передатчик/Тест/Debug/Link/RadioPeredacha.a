;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x18
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x18
;PCODE: $00000007 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000008 VOL: 0
	#endif
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;volatile char RadioPaketOut[RADIO_PAKET_DATA_BAYT_COUNT + 2];
;volatile char RadioPaketPeredacha = 0;
;char CRC_8(char *Data, unsigned char Length_Data)
; 0001 0022 {

	.CSEG
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
; 0001 0023 char Registr_CRC = 0xFF; // Начальное значение регистра CRC
; 0001 0024 unsigned char i; // Индексная переменная
; 0001 0025 
; 0001 0026 while (Length_Data--)  //Вычислить CRC для блока данных
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	*Data -> R20,R21
;	Length_Data -> R19
;	Registr_CRC -> R17
;	i -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0001 0027 {
; 0001 0028 Registr_CRC ^= *Data++;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0001 0029 for (i = 0; i < 8; i++)
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0001 002A {
; 0001 002B Registr_CRC >>= 1;
;PCODE: $00000028 VOL: 0
; 0001 002C if ( (Registr_CRC & 0b00000001) != 0 )
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0001 002D Registr_CRC ^= 0x31;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0001 002E }
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0001 002F }
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0001 0030 return Registr_CRC;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0001 0031 }
;PCODE: $0000003B VOL: 0
;char RadioWrite (char *Data)
; 0001 0040 {
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0001 0041 unsigned char i; // Индексная переменная
; 0001 0042 
; 0001 0043 // Если радио-передатчик свободен
; 0001 0044 if (RadioPaketPeredacha == 0)
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;	*Data -> R18,R19
;	i -> R17
;PCODE: $00000040 VOL: 1
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0001 0045 {
; 0001 0046 // Заполнение служебного пакета данными
; 0001 0047 RadioPaketOut[0] = PREAMBULA;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 1
; 0001 0048 for (i = 0; i < RADIO_PAKET_DATA_BAYT_COUNT; i++)
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0001 0049 RadioPaketOut[i+1] = Data[i];
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 1
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0001 004A RadioPaketOut[5 + 1] = CRC_8(Data, 5);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 1
;PCODE: $00000061 VOL: 0
; 0001 004B RadioPaketPeredacha = 1; // Разрешить передачу данных по радио-каналу
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 1
; 0001 004C return 1;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0001 004D }
; 0001 004E else
;PCODE: $00000068 VOL: 0
; 0001 004F return 0;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0001 0050 }
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;void RadioPeredacha(void)
; 0001 0055 {
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0001 0056 static unsigned char IndexBayt = 0; // Индекс байта
; 0001 0057 static unsigned char IndexPaketBayt = 0; // Индекс пакета байтов
; 0001 0058 static char Bit1, Bit0 = 0;
; 0001 0059 static char StartBit = 0; // Для передачи 1-ного стартового бита
; 0001 005A /*
; 0001 005B После выставления последнего выходного сигнала
; 0001 005C отсчитать один периуд и завершить передачу
; 0001 005D */
; 0001 005E static char FlagPeriudPoslednegoBita = 0;
; 0001 005F 
; 0001 0060 // Есть данные для передачи по радио-каналу
; 0001 0061 if (RadioPaketPeredacha == 1)
;PCODE: $00000074 VOL: 1
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0001 0062 {
; 0001 0063 if (FlagPeriudPoslednegoBita == 0)
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0001 0064 {
; 0001 0065 // Передача стартового бита
; 0001 0066 if (StartBit == 0)
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0001 0067 {
; 0001 0068 StartBit = 1;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0001 0069 BIT_1(RADIO_SIGNAL_OUT_PORTX, RADIO_SIGNAL_OUT_PIN);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0001 006A return;
;PCODE: $00000081 VOL: 0
; 0001 006B }
; 0001 006C // Передача 1 байта данных (манчестерское кодирование)
; 0001 006D if (BIT_RAVEN_0 (RadioPaketOut[IndexPaketBayt], IndexBayt))
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 1
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0001 006E {
; 0001 006F // Выходной бит данных 0 --- передаётся как сначало 0 потом 1
; 0001 0070 if (Bit0 == 0)
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0001 0071 {
; 0001 0072 BIT_0(RADIO_SIGNAL_OUT_PORTX, RADIO_SIGNAL_OUT_PIN);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0001 0073 Bit0 = 1;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0001 0074 }
; 0001 0075 else
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0001 0076 {
; 0001 0077 BIT_1(RADIO_SIGNAL_OUT_PORTX, RADIO_SIGNAL_OUT_PIN);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0001 0078 Bit0 = 0;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0001 0079 ++IndexBayt;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0001 007A }
;PCODE: $0000009C VOL: 0
; 0001 007B }
; 0001 007C else // Выходной бит данных 1 --- передаётся как сначало 1 потом 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0001 007D {
; 0001 007E if (Bit1 == 0)
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0001 007F {
; 0001 0080 BIT_1(RADIO_SIGNAL_OUT_PORTX, RADIO_SIGNAL_OUT_PIN);
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0001 0081 Bit1 = 1;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0001 0082 }
; 0001 0083 else
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0001 0084 {
; 0001 0085 BIT_0(RADIO_SIGNAL_OUT_PORTX, RADIO_SIGNAL_OUT_PIN);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0001 0086 Bit1 = 0;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0001 0087 ++IndexBayt;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0001 0088 }
;PCODE: $000000AF VOL: 0
; 0001 0089 }
;PCODE: $000000B0 VOL: 0
; 0001 008A // Отправлен ещё 1 байт данных
; 0001 008B if (IndexBayt == 8)
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0001 008C {
; 0001 008D IndexBayt = 0;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0001 008E ++IndexPaketBayt;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0001 008F // Передача всего пакета данных завершена
; 0001 0090 if (IndexPaketBayt == (RADIO_PAKET_DATA_BAYT_COUNT + 2))
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0001 0091 {
; 0001 0092 // Остался последний периуд
; 0001 0093 IndexPaketBayt = 0;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0001 0094 FlagPeriudPoslednegoBita = 1;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0001 0095 }
; 0001 0096 }
;PCODE: $000000C0 VOL: 0
; 0001 0097 }
;PCODE: $000000C1 VOL: 0
; 0001 0098 else // Передача завершена
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0001 0099 {
; 0001 009A FlagPeriudPoslednegoBita = 0;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0001 009B StartBit = 0;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0001 009C BIT_0(RADIO_SIGNAL_OUT_PORTX, RADIO_SIGNAL_OUT_PIN);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0001 009D RadioPaketPeredacha = 0;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 1
; 0001 009E }
;PCODE: $000000CC VOL: 0
; 0001 009F }
; 0001 00A0 }
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;void RadioPeredachaMeandr (void)
; 0001 00A5 {
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0001 00A6 static char BitOut = 1;

	.DSEG

	.CSEG
; 0001 00A7 
; 0001 00A8 if (BitOut == 1)
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0001 00A9 {
; 0001 00AA BIT_1(RADIO_SIGNAL_OUT_PORTX, RADIO_SIGNAL_OUT_PIN);
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0001 00AB BitOut = 0;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0001 00AC }
; 0001 00AD else
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0001 00AE {
; 0001 00AF BIT_0(RADIO_SIGNAL_OUT_PORTX, RADIO_SIGNAL_OUT_PIN);
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0001 00B0 BitOut = 1;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0001 00B1 }
;PCODE: $000000DF VOL: 0
; 0001 00B2 }
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
